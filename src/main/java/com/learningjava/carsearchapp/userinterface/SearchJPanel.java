/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.learningjava.carsearchapp.userinterface;

import com.learningjava.carsearchapp.Utility;
import com.learningjava.carsearchapp.model.Car;
import com.learningjava.carsearchapp.model.VehicleFleet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bhavinbhatia
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchJPanel
     */
    VehicleFleet vehicleFleet;
    ArrayList<Car> populatedCars;
    public SearchJPanel(VehicleFleet vehicleFleet) {
        initComponents();
        this.vehicleFleet = vehicleFleet;
       
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        lstManufacturer = new javax.swing.JComboBox<>();
        lstType = new javax.swing.JComboBox<>();
        lstCity = new javax.swing.JComboBox<>();
        lstYear = new javax.swing.JComboBox<>();
        lstModelNo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCarList = new javax.swing.JTable();
        btnGetCar = new javax.swing.JButton();
        lstSeats = new javax.swing.JComboBox<>();
        chcMaintainanceExpired = new javax.swing.JCheckBox();
        chcIsAvailable1 = new javax.swing.JCheckBox();
        lblSearch = new javax.swing.JLabel();
        txtSearchSerialNumber = new javax.swing.JTextField();
        btnSerialNum = new javax.swing.JButton();

        jPasswordField1.setText("jPasswordField1");

        lstManufacturer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Manufacturer", "Toyota", "Ford", "BMW", "Audi", "Tesla" }));
        lstManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstManufacturerActionPerformed(evt);
            }
        });

        lstType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Type of Car", "TypeA", "TypeB", "TypeC", " " }));
        lstType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstTypeActionPerformed(evt);
            }
        });

        lstCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select City", "New York", "Boston", "Cambridge", "California", "Seattle", "Texas", "San francisco" }));
        lstCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstCityActionPerformed(evt);
            }
        });

        lstYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Year", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022" }));
        lstYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstYearActionPerformed(evt);
            }
        });

        lstModelNo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Model", "X", "Y", "Z", "Green" }));
        lstModelNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstModelNoActionPerformed(evt);
            }
        });

        tblCarList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Type Of  Car", "Manufacturer", "City", "Total Seats", "Make Year", "Serail No.", "Model No.", "Maintainance Expired ", "Availibility"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCarList);

        btnGetCar.setText("Get Car ");
        btnGetCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetCarActionPerformed(evt);
            }
        });

        lstSeats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select No Of Seats", "4", "6", "8", " " }));
        lstSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstSeatsActionPerformed(evt);
            }
        });

        chcMaintainanceExpired.setText("Maintainace Expired");
        chcMaintainanceExpired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chcMaintainanceExpiredActionPerformed(evt);
            }
        });

        chcIsAvailable1.setText("Availibility");
        chcIsAvailable1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chcIsAvailable1ActionPerformed(evt);
            }
        });

        lblSearch.setText("Search By Serial Number");

        txtSearchSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchSerialNumberActionPerformed(evt);
            }
        });

        btnSerialNum.setText("Search ");
        btnSerialNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialNumActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chcIsAvailable1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSerialNum))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(lblSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSearchSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGetCar, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(242, 242, 242))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chcMaintainanceExpired)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lstCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lstModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lstType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lstManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lstYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lstSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(17, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lstCity, lstManufacturer, lstModelNo, lstSeats, lstType, lstYear});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGetCar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lstManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lstType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lstModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lstCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lstYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lstSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSearch)
                            .addComponent(txtSearchSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSerialNum)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chcIsAvailable1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chcMaintainanceExpired)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lstCity, lstManufacturer, lstModelNo, lstSeats, lstType, lstYear});

    }// </editor-fold>//GEN-END:initComponents

    private void lstManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstManufacturerActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> filteredCars = searchHelper(vehicleFleet.getFleetOfCars());
        populateCarRecords(filteredCars);
    }//GEN-LAST:event_lstManufacturerActionPerformed

    private void lstTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstTypeActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> filteredCars = searchHelper(vehicleFleet.getFleetOfCars());
        populateCarRecords(filteredCars);
    }//GEN-LAST:event_lstTypeActionPerformed

    private void btnGetCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetCarActionPerformed
        // TODO add your handling code here:
        int index = tblCarList.getSelectedRow();
        if (index < 0) {
                    JOptionPane.showMessageDialog(this, 
                            "Select a row to book a car.");
                    return;

        }
        Car selectedCar = populatedCars.get(index);
        if (!selectedCar.isAvailable()){
                    JOptionPane.showMessageDialog(this, 
                            "Car not available, please select another car.");
                    return;

        }
        
        selectedCar.setIsAvailable(false);
        JOptionPane.showMessageDialog(this, "Your car is on your way");
        
    }//GEN-LAST:event_btnGetCarActionPerformed

    private void lstModelNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstModelNoActionPerformed
        // TODO add your handling code here:
     ArrayList<Car> filteredCars = searchHelper(vehicleFleet.getFleetOfCars());
        populateCarRecords(filteredCars);
    }//GEN-LAST:event_lstModelNoActionPerformed

    private void lstCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstCityActionPerformed
        // TODO add your handling code here:
     ArrayList<Car> filteredCars = searchHelper(vehicleFleet.getFleetOfCars());
        populateCarRecords(filteredCars);
        
        
    }//GEN-LAST:event_lstCityActionPerformed

    private void lstYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstYearActionPerformed
        // TODO add your handling code here:
     ArrayList<Car> filteredCars = searchHelper(vehicleFleet.getFleetOfCars());
        populateCarRecords(filteredCars);
    }//GEN-LAST:event_lstYearActionPerformed

    private void lstSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstSeatsActionPerformed
        // TODO add your handling code here:
        
     ArrayList<Car> filteredCars = searchHelper(vehicleFleet.getFleetOfCars());
        populateCarRecords(filteredCars);
    }//GEN-LAST:event_lstSeatsActionPerformed

    private void chcMaintainanceExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chcMaintainanceExpiredActionPerformed
        // TODO add your handling code here:
        
        ArrayList<Car> filteredCars = searchHelper(vehicleFleet.getFleetOfCars());
        populateCarRecords(filteredCars);
        
    }//GEN-LAST:event_chcMaintainanceExpiredActionPerformed

    private void chcIsAvailable1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chcIsAvailable1ActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> filteredCars = searchHelper(vehicleFleet.getFleetOfCars());
        populateCarRecords(filteredCars);
    
    }//GEN-LAST:event_chcIsAvailable1ActionPerformed

    private void txtSearchSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchSerialNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchSerialNumberActionPerformed

    private void btnSerialNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialNumActionPerformed
        // TODO add your handling code here:
        String serialNumTxt = txtSearchSerialNumber.getText();
        if (serialNumTxt.isEmpty()){
            JOptionPane.showMessageDialog(this, 
                    "Please enter a valid serial number.");
            return;
        }
         if (!Utility.isNum(serialNumTxt)) {
            JOptionPane.showMessageDialog(this, "Incorrect Details for serial number.");
            return;
        }
        if (serialNumTxt.length() < 4 || serialNumTxt.length() > 10) {
            JOptionPane.showMessageDialog(this, "Serial number looks incorrect.");
            return;
        }
        
        int serialNum = Integer.valueOf(serialNumTxt);
        
        ArrayList<Car> cars = this.vehicleFleet.getCarBySerialNum(serialNum);
        populateCarRecords(cars);
    }//GEN-LAST:event_btnSerialNumActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGetCar;
    private javax.swing.JButton btnSerialNum;
    private javax.swing.JCheckBox chcIsAvailable1;
    private javax.swing.JCheckBox chcMaintainanceExpired;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JComboBox<String> lstCity;
    private javax.swing.JComboBox<String> lstManufacturer;
    private javax.swing.JComboBox<String> lstModelNo;
    private javax.swing.JComboBox<String> lstSeats;
    private javax.swing.JComboBox<String> lstType;
    private javax.swing.JComboBox<String> lstYear;
    private javax.swing.JTable tblCarList;
    private javax.swing.JTextField txtSearchSerialNumber;
    // End of variables declaration//GEN-END:variables

     private void populateCarRecords(ArrayList<Car> cars) {                                         
        
        DefaultTableModel model = (DefaultTableModel) tblCarList.getModel();
        model.setRowCount(0);
        
       

        for (Car car : cars) {
           
            String mantenanceDate = null;
            if(car.getCarMaintainanceDate() != null) {
                 mantenanceDate = Utility.dateToString(
                         car.getCarMaintainanceDate()
                    );
            }
            
            

            

               Object[] rowData = {
                   car.getType(),

                   car.getManufacturer(),
                   car.getCity(),
                   car.getNoOfSeats(),
                   car.getMakeYear(),
                   car.getSerialNum(),
                   car.getModelNo(),
                   mantenanceDate,
                   car.isAvailable()

               };
               model.addRow(rowData);
           }
        
        this.populatedCars = cars;
    }       
    

    private ArrayList<Car> searchHelper(ArrayList<Car> cars) {
//        lstCity, lstManufacturer, lstModelNo, lstSeats, lstType, lstYear
        // Manufacturer
        String selected;
        if (lstManufacturer.getSelectedIndex() != 0) {
            selected = lstManufacturer.getSelectedItem().toString();
            cars = VehicleFleet.getCarsByManufacturer(cars, 
                        selected);
   
        }
        
        
        if (lstType.getSelectedIndex() != 0) {
            selected = lstType.getSelectedItem().toString();
            cars = VehicleFleet.getCarsByType(cars,  selected );         
        
        }
  
        
        if (lstCity.getSelectedIndex() != 0) {
            selected = lstCity.getSelectedItem().toString();
            cars = VehicleFleet.getCarsByCity(cars, selected);
            
        }
            
        if (lstModelNo.getSelectedIndex() != 0) {
            selected = lstModelNo.getSelectedItem().toString();
            cars = VehicleFleet.getCarsByModelNum(cars, selected);
            
        }
        if (lstSeats.getSelectedIndex() != 0) {
            int numOfSeats = Integer.valueOf(lstSeats.getSelectedItem().toString());
            cars = VehicleFleet.getCarsByNumOfSeats(cars, numOfSeats);
            
        }
        
        if(chcIsAvailable1.isSelected()){
            boolean isSelected = Boolean.valueOf(chcIsAvailable1.isSelected());
            cars = vehicleFleet.getAvailableCars(cars,isSelected);
        }
        
        if(chcMaintainanceExpired.isSelected()){
            boolean isSelected = Boolean.valueOf(chcIsAvailable1.isSelected());
            cars = vehicleFleet.getCarsByExpiredMaintenance(cars);
        }
             return cars;
       
       
    }

    public void  searchSerialNumber(int serialNumber) {
        ArrayList<Car> cars = this.vehicleFleet.getCarBySerialNum(serialNumber);
        populateCarRecords(cars);
    }



}

